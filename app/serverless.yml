
service: school-barter

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-northeast-2
  lambdaHashingVersion: 20201221
  apiGateway:
    apiKeys:
      - serverless-apikey

# 로컬에서 serverless test
plugins:
  - serverless-offline
  - serverless-express
 

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


functions:
  app:
    handler: handler.handler
    events:
      - http:
          method: POST
          path: /api/user/signup
          cors: true
          private: true
      - http:
          method: POST
          path: /api/user/login
          cors: true
          private: true
      - http:
          method: GET
          path: /api/user/{nickname}
          cors: true
          private: true
          request:
            parameters:
              paths:
                nickname: true
      - http:
          method: GET
          path: /api/home/today
          cors: true
          # private: true
      - http:
          method: GET
          path: /api/home/by-price
          cors: true
          # private: true
      - http:
          method: GET
          path: /api/home/users/{userNo}/viewed-products
          cors: true
          # private: true
          request:
            parameters:
              paths:
                userNo: true
      - http:
          method: GET
          path: /api/pick/school
          cors: true
          private: true
      - http:
          method: GET
          path: /api/pick/department
          cors: true
          private: true
      - http:
          method: POST
          path: /api/pick/major
          cors: true
          private: true
      - http:
          method: GET
          path: /api/products
          cors: true
        #   private: true
      - http:
          method: GET
          path: /api/communities/
          cors: true
        #   private: true
      - http:
          method: GET
          path: /api/communities/{communityNo}
          cors: true
        #   private: true
          request:
            parameters:
              paths:
                communityNo: true
      - http:
            method: GET
            path: /api/watchlist/{userNo}
            cors: true
            # private: true
            request:
              parameters:
                paths:
                  userNo: true
      - http:
          method: POST
          path: /api/watchlist
          cors: true
          # private: true
      - http:
          method: DELETE
          path: /api/watchlist
          cors: true
          # private: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
